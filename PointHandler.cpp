#include "PointHandler.h"
PointHandler::PointHandler(WorldSpace&ws,Config&config): ws(ws){spawnTimer=0.0f;spawnTimerMax=config.fromSingle("-appledelay");maxPoints=config.fromSingle("-maxapples");}void PointHandler::generate(Borders&borders){int xSize=(borders.getMaximum()[X]-borders.getMinimum()[X])*10;int ySize=(borders.getMaximum()[Y]-borders.getMinimum()[Y])*10;std::vector<float>xData(xSize);std::vector<float>yData(ySize);for(int xi=0;xi<xSize;xi++)xData[xi]=borders.getMinimum()[X]+0.1f*xi;for(int yi=0;yi<ySize;yi++)yData[yi]=borders.getMinimum()[Y]+0.1f*yi;float x=xData[(rand()%xSize+2)-1 ];float y=yData[(rand()%ySize+2)-1 ];points.push_back(Point(Vector2(x,y)));}size_t PointHandler::intersectsPoint(Vector2 ip){for(size_t i=0;i<points.size();i++){if(points[i].intersectsPoint(ip))return i;}return-1;}size_t PointHandler::count(){return points.size();}float PointHandler::pickPoint(size_t index){float score=points[index].pick();points.erase(points.begin()+index);return score;}Point&PointHandler::operator[](size_t index){return points[index];}void PointHandler::update(Borders&borders){if((spawnTimer+=0.1f)>=spawnTimerMax){if(points.size()+1<=(size_t)maxPoints)generate(borders);spawnTimer=0.0f;}for(size_t i=0;i<points.size();i++)points[i].update();}void PointHandler::draw(){for(size_t i=0;i<points.size();i++)points[i].draw(ws);}