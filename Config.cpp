#include "Config.h"
#include<sstream>
#include<fstream>
#include<vector>
template<typename T>T strTo(std::string str){T value;std::stringstream(str)>>value;return value;}Config::Config(int argc,char**argv){configDataMultiple["-sensitivity"].resize(4,2.5f);configDataMultiple["-direction"].resize(4,0.0f);configDataSingle["-appledelay"]=20.0f;configDataSingle["-players"]=1;configDataSingle["-maxapples"]=1;configDataSingle["-acceleration"]=0.25f;configDataSingle["-initialspeed"]=1.0f;configDataSingle["-maxplayers"]=1.0f;configDataSingle["-pauseonstart"]=0;const char*defaultPath="conf";parseFile(defaultPath);if(argc>1){std::vector<std::string>args(argc);for(size_t i=0;i<args.size();i++)args[i]=argv[i];parseArguments(args);}}void Config::parseFile(const char*path){std::vector<std::string>data;std::ifstream fileI(path);if(fileI.is_open()){std::string line;std::string arg;while(std::getline(fileI,line)){if(line[0]=='#')continue;line+=' ';for(size_t i=0;i<line.length();i++){if(line[i]!=' '){arg+=line[i];}else{data.push_back(arg);arg="";}}data.push_back(arg);}parseArguments(data);}}void Config::parseArguments(std::vector<std::string>args){for(size_t i=0;i<args.size();i++){if(configDataSingle.find(args[i])!=configDataSingle.end()){std::string key=args[i];i++;configDataSingle[key]=strTo<float>(args[i]);float value=configDataSingle[ args[i-1] ];}else if(configDataMultiple.find(args[i])!=configDataMultiple.end()){std::string key=args[i];i++;size_t playerIndex=strTo<size_t>(args[i]);i++;float value=strTo<float>(args[i]);if(playerIndex>=configDataMultiple[key].size()){configDataMultiple[key].push_back(value);}else{configDataMultiple[key][playerIndex-1]=value;}}}}float Config::fromSingle(std::string index){return configDataSingle[index];}float Config::fromMulti(std::string index,size_t i){return configDataMultiple[index][i];}